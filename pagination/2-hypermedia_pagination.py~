#!/usr/bin/env python3
"""pagination start end"""


import csv
import math
from typing import Tuple, List


class Server:
    """Server class to paginate a database of popular baby names.
    """
    DATA_FILE = "Popular_Baby_Names.csv"

    def __init__(self):
        self.__dataset = None

    def index_range(self, page: int, page_size: int) -> Tuple[int, int]:
        """pagination start end"""
        start = (page - 1) * page_size
        end = start + page_size
        return start + 1, end + 1

    def dataset(self) -> List[List]:
        """Cached dataset
        """
        if self.__dataset is None:
            with open(self.DATA_FILE) as f:
                reader = csv.reader(f)
                dataset = [row for row in reader]
            self.__dataset = dataset[1:]

        return self.__dataset

    def get_page(self, page: int = 1, page_size: int = 10) -> List[List]:
        """get pages from file"""
        assert isinstance(page, int) and page > 0
        assert isinstance(page_size, int) and page_size > 0
        range = self.index_range(page, page_size)

        with open(self.DATA_FILE) as f:
            reader = csv.reader(f)
            dataset = [row for row in reader]
        self.__dataset = dataset[range[0]:range[1]]
        return self.__dataset

    def get_hyper(self, page: int = 1, page_size: int = 10) -> List[List]:
        """hyper text"""
        self.__dataset = None
        total = math.ceil(len(self.dataset()) / page_size)
        data = self.get_page(page, page_size)
        if (self.get_page(page + 1, page_size)):
            next = page + 1
        else:
            next = None
        if ((page - 1) < 1):
            prev = None
        else:
            prev = page - 1
        
        dic = {
            'page_size': len(data),
            'page': page,
            'data': data,
            'next_page': next,
            'prev_page': prev,
            'total_pages': total
        }

        return dic
